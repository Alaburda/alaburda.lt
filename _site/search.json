[
  {
    "objectID": "posts/create-date-dimension/create-date-dimension.html",
    "href": "posts/create-date-dimension/create-date-dimension.html",
    "title": "Create a Date Dimension",
    "section": "",
    "text": "What’s a date dimension anyway?\nI have been searching for a clean solution to building a date dimension so here I am writing my own. In R!\nIf you don’t speak Kimballese, a date dimension is a calendar. It contains a row for each day in a year as well as attributes about those dates. For example, a date dimension for 2023 would contain 365 rows and have columns such as week number, day of week, whether the day is a holiday etc. There’s really no correct way of building a date dimension as different organisations might have different ways of aggregating data across time but it is useful to have a “starter” table.\n\n\nBuilding the date table\nFirst, we’ll build the table using lubridate. My locale is Lithuanian, but your output should adapt to your locale:\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(tibble)\n\ndate_dimension &lt;- tibble(date = seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1),\n                         full_date_description = format(date, format=\"%Y m. %B %d d.\"),\n                         day_of_week = wday(date, label=FALSE, week_start = 1),\n                         day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                         calendar_iso_week = isoweek(date),\n                         calendar_week = week(date),\n                         calendar_month = month(date),\n                         calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                         calendar_quarter = quarter(date),\n                         calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                         calendar_year = year(date),\n                         is_weekday = as.integer(wday(date, week_start = 1) &lt; 6))\n\nhead(date_dimension)\n\n# A tibble: 6 × 12\n  date       full_date_description day_of_week day_of_week_name\n  &lt;date&gt;     &lt;chr&gt;                       &lt;dbl&gt; &lt;ord&gt;           \n1 2011-01-01 2011 m. sausis 01 d.            6 šeštadienis     \n2 2011-01-02 2011 m. sausis 02 d.            7 sekmadienis     \n3 2011-01-03 2011 m. sausis 03 d.            1 pirmadienis     \n4 2011-01-04 2011 m. sausis 04 d.            2 antradienis     \n5 2011-01-05 2011 m. sausis 05 d.            3 trečiadienis    \n6 2011-01-06 2011 m. sausis 06 d.            4 ketvirtadienis  \n# ℹ 8 more variables: calendar_iso_week &lt;dbl&gt;, calendar_week &lt;dbl&gt;,\n#   calendar_month &lt;dbl&gt;, calendar_month_name &lt;ord&gt;, calendar_quarter &lt;int&gt;,\n#   calendar_quarter_name &lt;chr&gt;, calendar_year &lt;dbl&gt;, is_weekday &lt;int&gt;\n\n\nIf this were a typical date dimension post, all you would have to do is adjust the date range and either export the table or write to a database. But this date dimension could be improved:\n\nIt doesn’t contain bank holidays\nIf your use case is different enough from mine, you would have to edit more than the date range to get a desired result.\n\n\n\nLet’s add holidays\nTo get bank holidays, you have a few options:\n\nNager.Date - free to use, no sign up required\nabstract - free tier available but sign up required\nCalendarific - free tier available but sign up required\nUse The Holiday API - free for previous years but paid for current and future years\nScrape Public Holidays Global - free to use but I haven’t checked their scraping policy\n\nLet’s use Nager.Date for this exercise. The API returns a list of dates that are bank holidays with quite a few useful attributes but I am keeping just the English and local holiday names.\n\nget_holidays &lt;- function(country_code = \"lt\", year = \"2023\") {\n  \n  rs &lt;- httr::GET(glue::glue(\"https://date.nager.at/api/v3/publicholidays/{year}/{country_code}\"))\n  \n  out &lt;- httr::content(rs) %&gt;% \n    tibble::enframe() %&gt;% \n    dplyr::select(value) %&gt;% \n    tidyr::unnest_wider(value) %&gt;% \n    dplyr::transmute(date = as.Date(date),\n           holiday_name_local = localName,\n           holiday_name = name)\n  \n  return(out)\n  \n}\n\nget_holidays()\n\n# A tibble: 14 × 3\n   date       holiday_name_local                       holiday_name             \n   &lt;date&gt;     &lt;chr&gt;                                    &lt;chr&gt;                    \n 1 2023-01-01 Naujieji metai                           New Year's Day           \n 2 2023-02-16 Lietuvos valstybės atkūrimo diena        The Day of Restoration o…\n 3 2023-03-11 Lietuvos nepriklausomybės atkūrimo diena Day of Restoration of In…\n 4 2023-04-09 Velykos                                  Easter Sunday            \n 5 2023-04-10 Antroji Velykų diena                     Easter Monday            \n 6 2023-05-01 Tarptautinė darbo diena                  International Working Day\n 7 2023-06-24 Joninės, Rasos                           St. John's Day           \n 8 2023-07-06 Valstybės diena                          Statehood Day            \n 9 2023-08-15 Žolinė                                   Assumption Day           \n10 2023-11-01 Visų šventųjų diena                      All Saints' Day          \n11 2023-11-02 Vėlinės                                  All Souls' Day           \n12 2023-12-24 Šv. Kūčios                               Christmas Eve            \n13 2023-12-25 Šv. Kalėdos                              Christmas Day            \n14 2023-12-26 Šv. Kalėdos                              St. Stephen's Day        \n\n\n\n\nMake it a function\nTo turn the code above into a function we are making the following changes:\n\nPulling start and end dates, date format, week start number and country code as function arguments\nPassing the years from the date dimension to the get_holiday function. I want to create tables that span multiple years so we’re using purrr::map_df to get holidays for multiple years.\n\n\ndate_dimension &lt;- function(date_from, date_to, full_date_format = \"%Y m. %B %d d.\", week_start = 1, country_code = \"LT\") {\n  \n  date_skeleton &lt;- tibble(date = seq(as.Date(date_from),as.Date(date_to),by = 1),\n                          full_date_description = format(date, format=full_date_format),\n                          day_of_week = wday(date, label=FALSE, week_start = week_start),\n                          day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                          calendar_iso_week = isoweek(date),\n                          calendar_week = week(date),\n                          calendar_month = month(date),\n                          calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                          calendar_quarter = quarter(date),\n                          calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                          calendar_year = year(date),\n                          is_weekday = as.integer(wday(date, week_start = 1) &lt; 6))\n\n  holidays &lt;- purrr::map_df(unique(date_skeleton$calendar_year), ~get_holidays(country_code = country_code, year = .))\n\n  out &lt;- date_skeleton %&gt;%\n    dplyr::left_join(holidays, by = \"date\") %&gt;%\n    dplyr::mutate(is_workday = is_weekday*is.na(holiday_name))\n\n\n  return(out)\n\n}\n\ndate_dimension(\"2024-01-01\",\"2024-05-01\")\n\n# A tibble: 122 × 15\n   date       full_date_description day_of_week day_of_week_name\n   &lt;date&gt;     &lt;chr&gt;                       &lt;dbl&gt; &lt;ord&gt;           \n 1 2024-01-01 2024 m. sausis 01 d.            1 pirmadienis     \n 2 2024-01-02 2024 m. sausis 02 d.            2 antradienis     \n 3 2024-01-03 2024 m. sausis 03 d.            3 trečiadienis    \n 4 2024-01-04 2024 m. sausis 04 d.            4 ketvirtadienis  \n 5 2024-01-05 2024 m. sausis 05 d.            5 penktadienis    \n 6 2024-01-06 2024 m. sausis 06 d.            6 šeštadienis     \n 7 2024-01-07 2024 m. sausis 07 d.            7 sekmadienis     \n 8 2024-01-08 2024 m. sausis 08 d.            1 pirmadienis     \n 9 2024-01-09 2024 m. sausis 09 d.            2 antradienis     \n10 2024-01-10 2024 m. sausis 10 d.            3 trečiadienis    \n# ℹ 112 more rows\n# ℹ 11 more variables: calendar_iso_week &lt;dbl&gt;, calendar_week &lt;dbl&gt;,\n#   calendar_month &lt;dbl&gt;, calendar_month_name &lt;ord&gt;, calendar_quarter &lt;int&gt;,\n#   calendar_quarter_name &lt;chr&gt;, calendar_year &lt;dbl&gt;, is_weekday &lt;int&gt;,\n#   holiday_name_local &lt;chr&gt;, holiday_name &lt;chr&gt;, is_workday &lt;int&gt;\n\n\nThat’s it! If you want to learn more about date dimensions, be sure to read Kimball’s Data Warehousing Toolkit Chapter 3."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "alaburda.lt",
    "section": "",
    "text": "Create a Date Dimension\n\n\n\n\n\n\n\ndata warehouse\n\n\n\n\n\n\n\n\n\n\n\nJun 29, 2023\n\n\nPaulius Alaburda\n\n\n\n\n\n\nNo matching items"
  }
]
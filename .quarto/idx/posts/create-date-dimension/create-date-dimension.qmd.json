{"title":"Create a Date Dimension","markdown":{"yaml":{"title":"Create a Date Dimension","author":"Paulius Alaburda","date":"2023-06-29","categories":["data warehouse"],"image":"image.jpg"},"headingText":"What's a date dimension anyway?","containsRefs":false,"markdown":"\n\n\nI have been searching for a clean solution to building a date dimension so here I am writing my own. In R! \n\nIf you don't speak Kimballese, a date dimension is a calendar. It contains a row for each day in a year as well as attributes about those dates. For example, a date dimension for 2023 would contain 365 rows and have columns such as week number, day of week, whether the day is a holiday etc. There's really no correct way of building a date dimension as different organisations might have different ways of aggregating data across time but it is useful to have a \"starter\" table.\n\n# Building the date table\n\nFirst, we'll build the table using `lubridate`. My locale is Lithuanian, but your output should adapt to your locale:\n\n```{r}\n\nlibrary(lubridate)\nlibrary(tibble)\n\ndate_dimension <- tibble(date = seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1),\n                         full_date_description = format(date, format=\"%Y m. %B %d d.\"),\n                         day_of_week = wday(date, label=FALSE, week_start = 1),\n                         day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                         calendar_iso_week = isoweek(date),\n                         calendar_week = week(date),\n                         calendar_month = month(date),\n                         calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                         calendar_quarter = quarter(date),\n                         calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                         calendar_year = year(date),\n                         is_weekday = as.integer(wday(date, week_start = 1) < 6))\n\nhead(date_dimension)\n\n```\n\nIf this were a typical date dimension post, all you would have to do is adjust the date range and either export the table or write to a database. But this date dimension could be improved:\n\n* It doesn't contain bank holidays\n* If your use case is different enough from mine, you would have to edit more than the date range to get a desired result.\n\n# Let's add holidays\n\nTo get bank holidays, you have a few options:\n\n* [Nager.Date](https://date.nager.at/Api) - free to use, no sign up required\n* [abstract](https://www.abstractapi.com/api/holidays-api) - free tier available but sign up required\n* [Calendarific](https://calendarific.com/) - free tier available but sign up required\n* Use The [Holiday API](https://holidayapi.com/) - free for previous years but paid for current and future years\n* Scrape [Public Holidays Global](publicholidays.com) - free to use but I haven't checked their scraping policy\n\nLet's use Nager.Date for this exercise. The API returns a list of dates that are bank holidays with quite a few useful attributes but I am keeping just the English and local holiday names.\n\n```{r}\n\nget_holidays <- function(country_code = \"lt\", year = \"2023\") {\n  \n  rs <- httr::GET(glue::glue(\"https://date.nager.at/api/v3/publicholidays/{year}/{country_code}\"))\n  \n  out <- httr::content(rs) %>% \n    tibble::enframe() %>% \n    dplyr::select(value) %>% \n    tidyr::unnest_wider(value) %>% \n    dplyr::transmute(date = as.Date(date),\n           holiday_name_local = localName,\n           holiday_name = name)\n  \n  return(out)\n  \n}\n\nget_holidays()\n\n\n\n```\n\n\n# Make it a function\n\nTo turn the code above into a function we are making the following changes:\n\n* Pulling start and end dates, date format, week start number and country code as function arguments\n* Passing the years from the date dimension to the get_holiday function. I want to create tables that span multiple years so we're using purrr::map_df to get holidays for multiple years.\n\n```{r}\n\ndate_dimension <- function(date_from, date_to, full_date_format = \"%Y m. %B %d d.\", week_start = 1, country_code = \"LT\") {\n  \n  date_skeleton <- tibble(date = seq(as.Date(date_from),as.Date(date_to),by = 1),\n                          full_date_description = format(date, format=full_date_format),\n                          day_of_week = wday(date, label=FALSE, week_start = week_start),\n                          day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                          calendar_iso_week = isoweek(date),\n                          calendar_week = week(date),\n                          calendar_month = month(date),\n                          calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                          calendar_quarter = quarter(date),\n                          calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                          calendar_year = year(date),\n                          is_weekday = as.integer(wday(date, week_start = 1) < 6))\n\n  holidays <- purrr::map_df(unique(date_skeleton$calendar_year), ~get_holidays(country_code = country_code, year = .))\n\n  out <- date_skeleton %>%\n    dplyr::left_join(holidays, by = \"date\") %>%\n    dplyr::mutate(is_workday = is_weekday*is.na(holiday_name))\n\n\n  return(out)\n\n}\n\ndate_dimension(\"2024-01-01\",\"2024-05-01\")\n\n```\n\nThat's it! If you want to learn more about date dimensions, be sure to read Kimball's Data Warehousing Toolkit Chapter 3.\n\n\n","srcMarkdownNoYaml":"\n\n# What's a date dimension anyway?\n\nI have been searching for a clean solution to building a date dimension so here I am writing my own. In R! \n\nIf you don't speak Kimballese, a date dimension is a calendar. It contains a row for each day in a year as well as attributes about those dates. For example, a date dimension for 2023 would contain 365 rows and have columns such as week number, day of week, whether the day is a holiday etc. There's really no correct way of building a date dimension as different organisations might have different ways of aggregating data across time but it is useful to have a \"starter\" table.\n\n# Building the date table\n\nFirst, we'll build the table using `lubridate`. My locale is Lithuanian, but your output should adapt to your locale:\n\n```{r}\n\nlibrary(lubridate)\nlibrary(tibble)\n\ndate_dimension <- tibble(date = seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1),\n                         full_date_description = format(date, format=\"%Y m. %B %d d.\"),\n                         day_of_week = wday(date, label=FALSE, week_start = 1),\n                         day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                         calendar_iso_week = isoweek(date),\n                         calendar_week = week(date),\n                         calendar_month = month(date),\n                         calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                         calendar_quarter = quarter(date),\n                         calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                         calendar_year = year(date),\n                         is_weekday = as.integer(wday(date, week_start = 1) < 6))\n\nhead(date_dimension)\n\n```\n\nIf this were a typical date dimension post, all you would have to do is adjust the date range and either export the table or write to a database. But this date dimension could be improved:\n\n* It doesn't contain bank holidays\n* If your use case is different enough from mine, you would have to edit more than the date range to get a desired result.\n\n# Let's add holidays\n\nTo get bank holidays, you have a few options:\n\n* [Nager.Date](https://date.nager.at/Api) - free to use, no sign up required\n* [abstract](https://www.abstractapi.com/api/holidays-api) - free tier available but sign up required\n* [Calendarific](https://calendarific.com/) - free tier available but sign up required\n* Use The [Holiday API](https://holidayapi.com/) - free for previous years but paid for current and future years\n* Scrape [Public Holidays Global](publicholidays.com) - free to use but I haven't checked their scraping policy\n\nLet's use Nager.Date for this exercise. The API returns a list of dates that are bank holidays with quite a few useful attributes but I am keeping just the English and local holiday names.\n\n```{r}\n\nget_holidays <- function(country_code = \"lt\", year = \"2023\") {\n  \n  rs <- httr::GET(glue::glue(\"https://date.nager.at/api/v3/publicholidays/{year}/{country_code}\"))\n  \n  out <- httr::content(rs) %>% \n    tibble::enframe() %>% \n    dplyr::select(value) %>% \n    tidyr::unnest_wider(value) %>% \n    dplyr::transmute(date = as.Date(date),\n           holiday_name_local = localName,\n           holiday_name = name)\n  \n  return(out)\n  \n}\n\nget_holidays()\n\n\n\n```\n\n\n# Make it a function\n\nTo turn the code above into a function we are making the following changes:\n\n* Pulling start and end dates, date format, week start number and country code as function arguments\n* Passing the years from the date dimension to the get_holiday function. I want to create tables that span multiple years so we're using purrr::map_df to get holidays for multiple years.\n\n```{r}\n\ndate_dimension <- function(date_from, date_to, full_date_format = \"%Y m. %B %d d.\", week_start = 1, country_code = \"LT\") {\n  \n  date_skeleton <- tibble(date = seq(as.Date(date_from),as.Date(date_to),by = 1),\n                          full_date_description = format(date, format=full_date_format),\n                          day_of_week = wday(date, label=FALSE, week_start = week_start),\n                          day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                          calendar_iso_week = isoweek(date),\n                          calendar_week = week(date),\n                          calendar_month = month(date),\n                          calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                          calendar_quarter = quarter(date),\n                          calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                          calendar_year = year(date),\n                          is_weekday = as.integer(wday(date, week_start = 1) < 6))\n\n  holidays <- purrr::map_df(unique(date_skeleton$calendar_year), ~get_holidays(country_code = country_code, year = .))\n\n  out <- date_skeleton %>%\n    dplyr::left_join(holidays, by = \"date\") %>%\n    dplyr::mutate(is_workday = is_weekday*is.na(holiday_name))\n\n\n  return(out)\n\n}\n\ndate_dimension(\"2024-01-01\",\"2024-05-01\")\n\n```\n\nThat's it! If you want to learn more about date dimensions, be sure to read Kimball's Data Warehousing Toolkit Chapter 3.\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"create-date-dimension.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","theme":"cosmo","title-block-banner":true,"title":"Create a Date Dimension","author":"Paulius Alaburda","date":"2023-06-29","categories":["data warehouse"],"image":"image.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
{
  "hash": "b103f278b355178050967fe26e8beb37",
  "result": {
    "markdown": "---\ntitle: \"Create a Date Dimension\"\nauthor: \"Paulius Alaburda\"\ndate: \"2023-06-29\"\ncategories: [data warehouse]\nimage: \"image.jpg\"\n---\n\n\n# What's a date dimension anyway?\n\nI have been searching for a clean solution to building a date dimension so here I am writing my own. In R! \n\nIf you don't speak Kimballese, a date dimension is a calendar. It contains a row for each day in a year as well as attributes about those dates. For example, a date dimension for 2023 would contain 365 rows and have columns such as week number, day of week, whether the day is a holiday etc. There's really no correct way of building a date dimension as different organisations might have different ways of aggregating data across time but it is useful to have a \"starter\" table.\n\n# Building the date table\n\nFirst, we'll build the table using `lubridate`. My locale is Lithuanian, but your output should adapt to your locale:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tibble)\n\ndate_dimension <- tibble(date = seq(as.Date('2011-01-01'),as.Date('2011-01-31'),by = 1),\n                         full_date_description = format(date, format=\"%Y m. %B %d d.\"),\n                         day_of_week = wday(date, label=FALSE, week_start = 1),\n                         day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                         calendar_iso_week = isoweek(date),\n                         calendar_week = week(date),\n                         calendar_month = month(date),\n                         calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                         calendar_quarter = quarter(date),\n                         calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                         calendar_year = year(date),\n                         is_weekday = as.integer(wday(date, week_start = 1) < 6))\n\nhead(date_dimension)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 12\n  date       full_date_description day_of_week day_of_week_name\n  <date>     <chr>                       <dbl> <ord>           \n1 2011-01-01 2011 m. sausis 01 d.            6 šeštadienis     \n2 2011-01-02 2011 m. sausis 02 d.            7 sekmadienis     \n3 2011-01-03 2011 m. sausis 03 d.            1 pirmadienis     \n4 2011-01-04 2011 m. sausis 04 d.            2 antradienis     \n5 2011-01-05 2011 m. sausis 05 d.            3 trečiadienis    \n6 2011-01-06 2011 m. sausis 06 d.            4 ketvirtadienis  \n# ℹ 8 more variables: calendar_iso_week <dbl>, calendar_week <dbl>,\n#   calendar_month <dbl>, calendar_month_name <ord>, calendar_quarter <int>,\n#   calendar_quarter_name <chr>, calendar_year <dbl>, is_weekday <int>\n```\n:::\n:::\n\n\nIf this were a typical date dimension post, all you would have to do is adjust the date range and either export the table or write to a database. But this date dimension could be improved:\n\n* It doesn't contain bank holidays\n* If your use case is different enough from mine, you would have to edit more than the date range to get a desired result.\n\n# Let's add holidays\n\nTo get bank holidays, you have a few options:\n\n* [Nager.Date](https://date.nager.at/Api) - free to use, no sign up required\n* [abstract](https://www.abstractapi.com/api/holidays-api) - free tier available but sign up required\n* [Calendarific](https://calendarific.com/) - free tier available but sign up required\n* Use The [Holiday API](https://holidayapi.com/) - free for previous years but paid for current and future years\n* Scrape [Public Holidays Global](publicholidays.com) - free to use but I haven't checked their scraping policy\n\nLet's use Nager.Date for this exercise. The API returns a list of dates that are bank holidays with quite a few useful attributes but I am keeping just the English and local holiday names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_holidays <- function(country_code = \"lt\", year = \"2023\") {\n  \n  rs <- httr::GET(glue::glue(\"https://date.nager.at/api/v3/publicholidays/{year}/{country_code}\"))\n  \n  out <- httr::content(rs) %>% \n    tibble::enframe() %>% \n    dplyr::select(value) %>% \n    tidyr::unnest_wider(value) %>% \n    dplyr::transmute(date = as.Date(date),\n           holiday_name_local = localName,\n           holiday_name = name)\n  \n  return(out)\n  \n}\n\nget_holidays()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 3\n   date       holiday_name_local                       holiday_name             \n   <date>     <chr>                                    <chr>                    \n 1 2023-01-01 Naujieji metai                           New Year's Day           \n 2 2023-02-16 Lietuvos valstybės atkūrimo diena        The Day of Restoration o…\n 3 2023-03-11 Lietuvos nepriklausomybės atkūrimo diena Day of Restoration of In…\n 4 2023-04-09 Velykos                                  Easter Sunday            \n 5 2023-04-10 Antroji Velykų diena                     Easter Monday            \n 6 2023-05-01 Tarptautinė darbo diena                  International Working Day\n 7 2023-06-24 Joninės, Rasos                           St. John's Day           \n 8 2023-07-06 Valstybės diena                          Statehood Day            \n 9 2023-08-15 Žolinė                                   Assumption Day           \n10 2023-11-01 Visų šventųjų diena                      All Saints' Day          \n11 2023-11-02 Vėlinės                                  All Souls' Day           \n12 2023-12-24 Šv. Kūčios                               Christmas Eve            \n13 2023-12-25 Šv. Kalėdos                              Christmas Day            \n14 2023-12-26 Šv. Kalėdos                              St. Stephen's Day        \n```\n:::\n:::\n\n\n\n# Make it a function\n\nTo turn the code above into a function we are making the following changes:\n\n* Pulling start and end dates, date format, week start number and country code as function arguments\n* Passing the years from the date dimension to the get_holiday function. I want to create tables that span multiple years so we're using purrr::map_df to get holidays for multiple years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_dimension <- function(date_from, date_to, full_date_format = \"%Y m. %B %d d.\", week_start = 1, country_code = \"LT\") {\n  \n  date_skeleton <- tibble(date = seq(as.Date(date_from),as.Date(date_to),by = 1),\n                          full_date_description = format(date, format=full_date_format),\n                          day_of_week = wday(date, label=FALSE, week_start = week_start),\n                          day_of_week_name = wday(date, label=TRUE, abbr = FALSE),\n                          calendar_iso_week = isoweek(date),\n                          calendar_week = week(date),\n                          calendar_month = month(date),\n                          calendar_month_name = month(date, label = TRUE, abbr = FALSE),\n                          calendar_quarter = quarter(date),\n                          calendar_quarter_name = paste0(\"Q\",quarter(date)),\n                          calendar_year = year(date),\n                          is_weekday = as.integer(wday(date, week_start = 1) < 6))\n\n  holidays <- purrr::map_df(unique(date_skeleton$calendar_year), ~get_holidays(country_code = country_code, year = .))\n\n  out <- date_skeleton %>%\n    dplyr::left_join(holidays, by = \"date\") %>%\n    dplyr::mutate(is_workday = is_weekday*is.na(holiday_name))\n\n\n  return(out)\n\n}\n\ndate_dimension(\"2024-01-01\",\"2024-05-01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 15\n   date       full_date_description day_of_week day_of_week_name\n   <date>     <chr>                       <dbl> <ord>           \n 1 2024-01-01 2024 m. sausis 01 d.            1 pirmadienis     \n 2 2024-01-02 2024 m. sausis 02 d.            2 antradienis     \n 3 2024-01-03 2024 m. sausis 03 d.            3 trečiadienis    \n 4 2024-01-04 2024 m. sausis 04 d.            4 ketvirtadienis  \n 5 2024-01-05 2024 m. sausis 05 d.            5 penktadienis    \n 6 2024-01-06 2024 m. sausis 06 d.            6 šeštadienis     \n 7 2024-01-07 2024 m. sausis 07 d.            7 sekmadienis     \n 8 2024-01-08 2024 m. sausis 08 d.            1 pirmadienis     \n 9 2024-01-09 2024 m. sausis 09 d.            2 antradienis     \n10 2024-01-10 2024 m. sausis 10 d.            3 trečiadienis    \n# ℹ 112 more rows\n# ℹ 11 more variables: calendar_iso_week <dbl>, calendar_week <dbl>,\n#   calendar_month <dbl>, calendar_month_name <ord>, calendar_quarter <int>,\n#   calendar_quarter_name <chr>, calendar_year <dbl>, is_weekday <int>,\n#   holiday_name_local <chr>, holiday_name <chr>, is_workday <int>\n```\n:::\n:::\n\n\nThat's it! If you want to learn more about date dimensions, be sure to read Kimball's Data Warehousing Toolkit Chapter 3.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}